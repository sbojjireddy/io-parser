Parse Tubi IO (Insertion Order) contract → JSON (use provided schema; return JSON only)

Task
- Extract top-level campaign fields and per-flight line items from one Tubi IO (PDF/text). No guessing. If a field isn't present, use null (except frequency_cap default=2).

Core rules
- Advertiser: The client company (not agency/supplier). Extract from: "Advertiser/Brand" labels, placement taxonomy ".../BRAND/..." (normalize case), "Primary ad server" (strip suffixes).
  * DO NOT use supplier/publisher names (TO, Supplier/Traffic, Financial Supplier, domains like tubi.tv).
  * Explicitly NEVER set advertiser to "Tubi" or any publisher/vendor name, even if shown prominently.
  * Examples: "TACO BELL" → "Taco Bell"; exclude "Tubi" if it appears as supplier.

- Advertiser source (Selection order)
  * If a header table/row has a **Client** field (e.g., "Client → NATIONAL VISION INC"), prefer that for advertiser_name.
  * Else use explicit "Advertiser/Brand" labels.
  * Never take advertiser from Supplier/Publisher fields.

- Dates: Convert literal calendar dates you see to YYYY-MM-DD. Do not shift dates.
  * Accept separators ".", "/", "–", "-" and compact tokens; normalize before parsing.
  * Assume US format (MM/DD/YY) unless the day > 12 (then interpret as DD/MM/YY). If year is two digits, infer century from context.
  * Normalize odd tokens like "01.02/2025" → "01/02/2025" per the above rule.
  * Example: "4/20/25 - 6/25/25" → start "2025-04-20", end "2025-06-25".
  * In explanation.summary include: "Found '4/20/25 - 6/25/25' → start 2025-04-20, end 2025-06-25 (preserved exact dates)."
  * start flight = start date, end flight = end date (no implicit shifting).
  * **Top-level dates vs period (HARD GATE):** campaign.start and campaign.end MUST be ISO dates (YYYY-MM-DD) taken from the **Flight** header range only (e.g., "2025-01-13 to 2025-12-31"). Do not place formatted period tokens (e.g., "Dec'25") into any date field. If a Mon'YY token appears in a date field, reject and re-parse.

- Numbers: impressions as integer; spend as decimal; strip commas.
  * Currency: If a "$" appears ANYWHERE in the document, set currency="USD". Otherwise extract a 3-letter currency code if present, else null.
  * PO Number: Look for "PO Number", "Purchase Order", "Order Number", "External PO". This is not an internal campaign ID.
  * Parse spend from cells like "$90,189.47" → 90189.47.
  * Do NOT scale or divide spend by 1,000. Scaling applies only in CPM math checks, never when extracting displayed totals.

**Order totals precedence (HARD GATE)**
  * If an "Order totals" / "Order total(s)" table is present, treat it as the **single source of truth** for campaign totals.
  * Set \`total_contracted_impressions\` to the literal Impressions (strip commas) and \`total_campaign_spend\` to the literal Cost (strip "$" and commas).
  * Do **not** compute totals from flights when an Order totals table exists; only compute when no Order totals are present.
  * Provenance for these fields must quote the exact Order totals line (e.g., "Impressions 86,011,110"; "Cost $1,284,836.20").
  * **Field mapping (EXACT):**
    - total_contracted_impressions ← "Impressions" from **Order totals**
    - total_campaign_spend ← "Cost" from **Order totals**
    - currency ← "USD" if any "$" appears anywhere
  * **Never** take totals from "Flighting summary" or any roll-up table.

**Totals reconciliation with Added Value**
  * AV units must be included in the campaign impression total.
  * After extracting flights, compute sum_all_units = sum(paid.units + av.units). If sum_all_units ≠ Order totals Impressions, keep the Order totals value for \`total_contracted_impressions\` and add a note in \`explanation.assumptions\`.
  * Added Value lines have CPM = 0 and Cost = 0.00, units > 0

**NEVER EMIT SPAN FLIGHTS WHEN MONTHLY COLUMNS EXIST (HARD GATE)**
  * If a placement row (e.g., P375Z4Z) has monthly headers (Sep 25, Oct 25, …), emit **one flight per month** clipped to that month and campaign window.
  * \`flights[].name\` must equal the month token (e.g., "Oct 25").
  * Reject and retry if you produce only one span flight when month columns are visible.
  * **Per-placement completeness check:** For each placement_id that has monthly cells, emit one flight per populated month. Do not stop after the first placement; continue through all placements on subsequent pages.
  * **Month windowing:** Clip each monthly flight to the campaign window (campaign.start/campaign.end).
  * **Hiatus/Dark weeks notes:** If hiatus weeks are listed but the placement provides monthly cells, do **not** prorate; treat hiatus as context only unless a **weekly** table exists for that placement/month.

Example (monthly)
❌ Incorrect: P375Z4Z → one flight 2025-09-29 to 2025-12-07, Units 7,509,551, Cost $157,250.00  
✅ Correct: four flights  
- Sep 25 → 214,559 / $4,492.87  
- Oct 25 → 3,325,658 / $69,639.28  
- Nov 25 → 3,218,379 / $67,392.86  
- Dec 25 → 750,955 / $15,724.99

✅ Correct (monthly added value)  
P375Z48 → four flights with Units [6,437; 99,770; 96,552; 22,528], Rate 0.0, Cost 0.00 each.

**Weekly / Booking-Week precedence (HARD GATE)**
  * If a section/table labeled "Booking Week", "Week of …", etc. exists with ≥2 rows, emit **one flight per week row** and NEVER a single combined span flight.
  * Dates: If a full date is shown, start = that date; end = start + 6 days, clipped to campaign end. If only month/day (e.g., "Sep 1"), assume the campaign's year.
  * Apply the universal **Month boundaries** rule if a booking week crosses a month (split + prorate).
  * Numbers when week rows omit impressions: if Allocation and CPM exist, compute \`units = round((allocation / cpm) * 1000)\`. Cost = Allocation; \`cost_method = "CPM"\`; \`rate_cpm\` = shown CPM.
  * Added-value weeks: if $0 allocation and rate=0, set cost=0.00, rate_cpm=0.0, units=row's value if present; otherwise 0.
  * Placement ID on weekly rows: if none shown, set \`placement_id = null\`.
  * Provenance per week flight: quote the **week token** (e.g., "Sep 1 $5,000") and CPM; location_hint mentions "Booking Week" or "Airing Days".
  * Anti-merge: if only one span flight is produced while a Booking-Week table has N≥2 rows, discard the span and emit **N weekly flights**.

Few-shot (weekly)
- Incorrect: one flight 2025-09-01 to 2025-09-14, 1,250,000 units, $10,000, CPM $8.
- Correct: two flights:
  - Week of Sep 1, 2025 → 2025-09-01 to 2025-09-07, units 625,000, cost 5000.00, rate_cpm 8.
  - Week of Sep 8, 2025 → 2025-09-08 to 2025-09-14, units 625,000, cost 5000.00, rate_cpm 8.
  Provenance must quote "Sep 1 $5,000", "Sep 8 $5,000", and "$8 CPM", with location_hint mentioning "Booking Week".

**DR Flight Items Handling (HARD GATE)**
  * If there are flight items broken out weekly, output weekly flights.
  * Flights must not cross months (use the universal split + prorate rule).
  * Example: 9/25–10/03 → split into 9/25–9/30 and 10/01–10/03, prorating costs/units by active days.

**Placement selection + multi-row filtering (HARD GATE)**
  * Emit flights for **EVERY** placement with a placement ID token (regex: \`\\bP[0-9A-Z]{6,}\\b\`) across **all pages**.
  * Ignore companion creative metadata rows ("15s/30s", "Rich media", "Served by") if they don’t carry monthly Units/Cost.
  * Authoritative pattern to target:
    "N {PLACEMENT NAME} {PLACEMENT_ID} (Impressions) | Total | … | {Mon YY} | {Units} | {Rate} | $ {Cost}"


**Two-phase extraction loop (MANDATORY)**
  * **Phase A — Harvest IDs:** Scan the entire text and build a **deduplicated, ordered** list \`placement_index\` of all placement_id tokens (regex above). Record each first occurrence position for stable ordering.
  * **Phase B — Emit flights:** For **each** placement_id in placement_index order, find its "… (Impressions) | Total |" row block and extract **every populated month cell**. Create exactly one monthly flight per populated cell.

**Coverage self-checks (HARD GATE)**
  * After building flights, compute:
    - harvested_ids = all unique placement_id tokens found in the doc
    - ids_in_flights = all unique placement_id tokens present in flights
  * If ids_in_flights.size < harvested_ids.size, **do not finalize**. Re-scan and extract the missing placement blocks.
  * Determine the set of month tokens present in the document: months_present = any of {Jan 25, Feb 25, …, Dec 25} that appear alongside Units/Rate/Cost in a placement block.
  * For each placement_id that exhibits any of months_present, emit a flight for **each** of its populated months. If a particular month truly has no value for that placement, skip it but mention the absence in explanation.assumptions.
  * **Never** finalize after only the first placement; require at least two distinct placement_ids in flights unless the document truly contains only one (rare—note it if so).

**Flight Item Rules: Row-aligned Units Only (HARD GATE)**
  * Units must come from the same row as the placement_id AND the same month/week column.
  * Do not use summary percentages/totals (e.g., "220,996 (3%)").
  * Only emit flights as the IO presents them. Do not guess, merge, or split beyond mandatory dark-week/month-boundary rules.
  * If a month contains both a paid line AND an added-value line, emit two separate flights for that month (one paid, one AV). Do NOT merge paid + AV.
  * If multiple paid and AV lines exist for the same month, keep paid vs AV separated.
  * **Creative rows vs detail rows:** If a row’s monthly cells are present **without** Units/Cost for that specific placement_id line, do **not** emit a flight from that row. Use the **Flighting details** row that explicitly lists {Mon YY} | {Units} | {Rate} | {Cost} for that placement_id.

**CPM consistency check (HARD GATE)**
  * Require cost ≈ (units / 1000) * rate_cpm within ±0.5.
  * If units don't satisfy the equation with the row's rate and cost, re-read Units from the placement row and prefer the value that satisfies CPM math.
  * Example: rate_cpm = 15.86 and cost = 141,666.66 → units ≈ 8,932,324 (not 13,932,324).
  * **Guardrail:** If the (units/rate/cost) triplet fails ±0.5 tolerance for a month, discard that reading and re-read the **same** month cell for that placement_id. Prefer the triplet that satisfies CPM math.

**Ignore summary roll-ups (HARD GATE)**
  * Do NOT emit flights from "Flighting summary" tables or "Total" rows with no placement ID, or any roll-up rows/columns.
  * Use the "Flighting details" section as the authoritative source for flights.
  * Totals with percentages in parentheses next to numbers are roll-ups—ignore.

**Package/header span suppression (HARD GATE)**
  * If a placement row has a header span like "..._09-29-2025_12-28-2025_Package" AND a monthly/weekly breakdown exists, DO NOT emit a separate package-span flight. Use the month/week columns only.
  * Emit either the set of months/weeks OR a single span flight—never both. Prefer months/weeks when present.

**Detail-row requirement (HARD GATE)**
  * A valid flight MUST come from a detail row that contains a **placement ID token** (e.g., P375Z4Z, P375Z48, P2Z2B6T). For weekly tables without explicit IDs, set \`placement_id = null\`.
  * \`provenance.quote\` must include BOTH the placement ID (when present) and the **month/week token** (e.g., "P375Z4Z … Oct 25 … 3,325,658 … $69,639.28" OR "Week of Sep 1, 2025 … $5,000 … $8 CPM").
  * \`provenance.location_hint\` must include "Flighting details" (monthly) or "Booking Week/Airing Days" (weekly).
  * Reject any candidate flight whose snippet lacks a placement ID when one is visible, or whose location refers to a summary.

**Monthly breakdowns (preferred when present)**
  * If a table has monthly headers (JAN 25, FEB 25, …), emit one flight per month column, dates clipped to that month and campaign window.
  * If Units are missing but Allocation+CPM appear in a month cell, compute Units as: \`round((allocation / cpm) * 1000)\`.
  * Do not use summary-format numbers (e.g., "220,996 (3%)"). Prefer detail-row values.
  * Provenance for each monthly flight must quote the **month token** and that month's Units/Cost, or the Allocation+CPM used to compute Units.
  * Quarterly or multi-month rows: only emit as-written if the row explicitly lists a spanning range (e.g., "Q1'25 (1/2/25–3/31/25)"). Do not split unless a separate monthly breakdown also exists.
  * When both quarter notes and monthly tables exist, use the monthly table for flights; treat quarter labels as context only.
  * \`unit_type\` is "Impressions" unless explicitly different; if different, quote it exactly.

**Added Value / Bonus / Makegood**
  * Treat rows labeled "Added Value", "Value Add", "Bonus", "Makegood", "AV", "N/C", "No charge", or with Cost = $0.00 (and rate_cpm = 0) as valid AV flights.
  * Emit normal flights with cost=0.00; cost_method per table (usually CPM); currency as per global currency rule.
  * Provenance must include the snippet indicating AV ("0.0000", "$0.00", "Added Value").

**Account Executive (HARD GATE)**
  * Only populate \`account_executive_name\` when the person is explicitly labeled as Tubi staff ("Tubi Account Executive", "Tubi Sales", appears under a Tubi/Supplier contact block).
  * The account executive can also be labeled as "AE", if there is a name next to "AE", then this person is the account executive
  * DO NOT use client or agency contacts.
  * If unsure or unlabeled, set to null.
  * Provenance for AE must quote the label proving Tubi affiliation; otherwise return null and add \`account_executive_name\` to omissions only if absent.

**Frequency Cap (selection rule)**
  * If multiple caps exist (e.g., "Hourly 2", "Daily 6", "Booking 20"), set \`frequency_cap\` to the **Daily** value.
  * Preference order: **Daily** > Hourly > Weekly/Booking. If none present, default to **2**.
  * Provenance must include the line proving the chosen cap (e.g., "Daily 6").

**Period**
  * If explicit period labels exist, extract as-is (e.g., "Apr'25").
  * Otherwise, **infer from flight dates**:
    - Format = \`Mon'YY\` (e.g., start 2025-04-20 → "Apr'25"; end 2025-06-25 → "Jun'25").
    - If either flight date is null, set period.start/end to null.
    - In explanation.summary, state that period was inferred from flight dates.

**Provenance (MANDATORY for EVERY non-null top-level field)**
  * Include exact quote + location_hint for ALL non-null top-level fields.
  * Individual flight items do NOT need separate provenance entries—only the overall flight structure needs provenance.
  * For exact fields (advertiser_name, agency_name, etc.): include the exact text and where found.
  * For derived/computed fields (e.g., units from Allocation & CPM; prorated splits due to dark weeks or month boundary): include the source snippet(s) and note "computed/prorated" in location_hint.
  * For inferred fields (period from flight dates): cite flight dates and mark "inferred" in location_hint.
  * Quality check: Count your non-null top-level fields vs provenance entries—they must match (excluding individual flight details).
  * **Top-level start/end provenance:** quote the exact **"Flight"** header line (e.g., "Flight: 2025-01-13 to 2025-12-31").
  * **Totals provenance:** quote the **"Order totals"** lines that contain "Impressions ..." and "Cost $...".

**CONFIDENCE INTERVAL REQUIREMENTS**

For every field you extract, you MUST include confidence intervals in the provenance:

**Required Fields in Provenance:**
- find_confidence_interval [min, max]: Confidence interval for likelihood the quoted span truly appears in TEXT and belongs to this field (based only on exact match + nearby labels/headers + location specificity)
- value_confidence_interval [min, max]: Confidence interval for likelihood the normalized value you output is correct (formatting, unit interpretation, context alignment)
- rationale: Short reason tied to the evidence (max ~20 words)

**Calibration Guidelines:**
- **[95, 100]**: Perfect exact match with crystal-clear label (rare)
- **[85, 95]**: Exact quote with clear label, minor formatting differences
- **[75, 90]**: Strong evidence, clear label, some interpretation needed
- **[65, 80]**: Good evidence but requires some inference or context
- **[55, 75]**: Moderate evidence, label is present but ambiguous
- **[45, 65]**: Weak evidence, requires significant interpretation
- **[35, 55]**: Partial match, fuzzy evidence
- **[0, 45]**: Speculative, very uncertain

**Examples:**
- find_confidence_interval=[90, 95], value_confidence_interval=[85, 90]: "Advertiser: Taco Bell" → "Taco Bell" (exact match, clear label)
- find_confidence_interval=[80, 90], value_confidence_interval=[70, 80]: "Budget: $50K" → 50000 (clear label, unit conversion)
- find_confidence_interval=[65, 75], value_confidence_interval=[60, 70]: "Campaign runs 4/20-6/25" → dates (requires date parsing)
- find_confidence_interval=[55, 65], value_confidence_interval=[50, 60]: "Contact: John Smith" → "John Smith" (unclear if this is AE)
- find_confidence_interval=[40, 50], value_confidence_interval=[35, 45]: "~$25k budget" → 25000 (approximate, unclear formatting)

**CRITICAL**: Use realistic confidence intervals. Most extractions should be [60, 90], not [95, 100]. Only use [95, 100] for perfect, unambiguous matches. Be honest about uncertainty - it helps with quality assessment.

**Example Provenance Entry:**
{
  "field": "advertiser_name", 
  "quote": "Advertiser: Taco Bell", 
  "location_hint": "contract header section",
  "find_confidence_interval": [90, 95],
  "value_confidence_interval": [85, 90],
  "rationale": "Exact match with clear label"
}

**Omissions**
  * ONLY add field names to explanation.omissions if they are null (not found).
  * ALWAYS explain why/why not these fields exist: po_number, account_executive_name.
  * If a field has a value, do NOT include it in omissions.
  * Do **not** add frequency_cap to omissions when defaulting to 2.

**Validation (soft gates)**
  * \`flights.length\` should equal the count of populated month columns or the number of booking-week rows with values (after any required splits).
  * Sum of each placement's monthly units should be ≤ that placement's detail-row total (and must never equal the global summary total).
  * Verify sum(all flights' units) == \`total_contracted_impressions\` (± small epsilon). If not, re-check AV inclusion and that no summary numbers were used.
  * If sums of flights.units or flights.cost don't match top-level totals, still return flights and add a note in \`explanation.assumptions\`.

Output
- Return JSON only.
- Must exactly match the provided JSON schema.
- Use Structured Outputs/JSON Schema mode to validate the response.

**DO NOT FINALIZE if coverage is incomplete.**
If, after extraction, size(unique placement_ids in flights) < 14 OR flights.length < 84:
- Re-scan the text for each missing placement_id.
- Locate its “Flighting details” row formatted like:
  “N {PLACEMENT NAME} {PLACEMENT_ID} (Impressions) | Total | … | {Mon YY} | {Units} | {Rate} | $ {Cost}”
- Emit one flight per populated month cell.
Only when all listed placement_ids have their required months should you return the JSON.

**STRICT ORDERING**
Output flights ordered by:
1) placement_id in the order shown above,
2) month ascending (Jan→Dec).


**FINAL VALIDATION CHECKLIST**
✅ Every non-null top-level field has a provenance entry  
✅ Provenance count matches extracted field count (excluding individual flight details)  
✅ All quotes are exact text from the document  
✅ All location_hints are descriptive and helpful  
✅ \`campaign.end\` MUST be an ISO date like 2025-12-31; if it equals a period token like "Dec'25", reject and correct.  
✅ Count of flights equals the sum of populated months across **all** placement IDs found in "Flighting details". If only the first placement produced flights, continue parsing remaining placements before finalizing.

Few-shot clarification
- ❌ Incorrect: "Jan 25, Feb 25, Mar 25 …" → one flight with start 2025-01-02, end 2025-03-31.
- ✅ Correct: three flights:
  - Jan 25: 2025-01-02 to 2025-01-31
  - Feb 25: 2025-02-01 to 2025-02-28
  - Mar 25: 2025-03-01 to 2025-03-31
  Each with its own Units/Cost and provenance that includes the month token.

- ✅ Correct (weekly): If a "Booking Week" table shows "Sep 1 $5,000" and "Sep 8 $5,000" with CPM $8, emit two weekly flights with units 625,000 each, cost $5,000 each, rate_cpm 8, with provenance quoting the week tokens and CPM.
